import json
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –¢–≤–æ–π —Ç–æ–∫–µ–Ω ---
TOKEN = "7883022139:AAGz7VOUdmoC_dwr7_EumyxSFY74IEcjb1k"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

DATA_FILE = "data.json"

# --- –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {"tasks": [], "schedule": {}}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï “Æ–π —Ç–∞–ø—Å—ã—Ä–º–∞—Å—ã–Ω “õ–æ—Å—É"), KeyboardButton(text="üìã –¢—ñ–∑—ñ–º–¥—ñ “õ–∞—Ä–∞—É")],
        [KeyboardButton(text="‚è∞ –ï—Å–∫–µ —Å–∞–ª“ì—ã—à"), KeyboardButton(text="üßπ –¢–∞–∑–∞–ª–∞—É")],
        [KeyboardButton(text="üóìÔ∏è –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ"), KeyboardButton(text="üîó –ü–∞–π–¥–∞–ª—ã —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä")],
    ],
    resize_keyboard=True
)

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class AddTask(StatesGroup):
    waiting_for_task = State()

class Schedule(StatesGroup):
    waiting_for_day = State()

class Reminder(StatesGroup):
    waiting_for_text = State()

# --- /start ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–°”ô–ª–µ–º üëã\n–ú–µ–Ω ‚Äî —Å—Ç—É–¥–µ–Ω—Ç—Ç—ñ“£ –∫”©–º–µ–∫—à—ñ “õ“±—Ä–∞–ª—ã–º—ã–Ω!\n\n"
        "üìö /add - “Ø–π —Ç–∞–ø—Å—ã—Ä–º–∞—Å—ã–Ω “õ–æ—Å—É\n"
        "üìã /list - —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ\n"
        "üóìÔ∏è /schedule - —Å–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ\n"
        "‚è∞ /remind - –µ—Å–∫–µ —Å–∞–ª“ì—ã—à –æ—Ä–Ω–∞—Ç—É\n"
        "üßπ /clear - –±–∞—Ä–ª—ã“õ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä–¥—ã ”©—à—ñ—Ä—É\n"
        "üîó /links - –ø–∞–π–¥–∞–ª—ã —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä",
        reply_markup=main_menu
    )

# --- /add ---
@dp.message(F.text.in_({"/add", "‚ûï “Æ–π —Ç–∞–ø—Å—ã—Ä–º–∞—Å—ã–Ω “õ–æ—Å—É"}))
async def add_task(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –¢–∞–ø—Å—ã—Ä–º–∞–Ω—ã –µ–Ω–≥—ñ–∑ (–º—ã—Å–∞–ª—ã: '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ ‚Äî 25 “õ–∞–∑–∞–Ω')")
    await state.set_state(AddTask.waiting_for_task)

@dp.message(AddTask.waiting_for_task)
async def save_task(message: types.Message, state: FSMContext):
    data = load_data()
    data["tasks"].append(message.text)
    save_data(data)
    await message.answer("‚úÖ –¢–∞–ø—Å—ã—Ä–º–∞ “õ–æ—Å—ã–ª–¥—ã!", reply_markup=main_menu)
    await state.clear()

# --- /list ---
@dp.message(F.text.in_({"/list", "üìã –¢—ñ–∑—ñ–º–¥—ñ “õ–∞—Ä–∞—É"}))
async def list_tasks(message: types.Message):
    data = load_data()
    if not data["tasks"]:
        await message.answer("üì≠ –¢–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ –±–æ—Å.", reply_markup=main_menu)
    else:
        tasks = "\n".join([f"{i+1}. {t}" for i, t in enumerate(data["tasks"])])
        await message.answer(f"üìã “Æ–π —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä—ã:\n\n{tasks}", reply_markup=main_menu)

# --- /clear ---
@dp.message(F.text.in_({"/clear", "üßπ –¢–∞–∑–∞–ª–∞—É"}))
async def clear_tasks(message: types.Message):
    save_data({"tasks": [], "schedule": load_data().get("schedule", {})})
    await message.answer("üßπ –ë–∞—Ä–ª—ã“õ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä ”©—à—ñ—Ä—ñ–ª–¥—ñ!", reply_markup=main_menu)

# --- /links ---
@dp.message(F.text.in_({"/links", "üîó –ü–∞–π–¥–∞–ª—ã —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä"}))
async def links(message: types.Message):
    text = (
        "üåê –ü–∞–π–¥–∞–ª—ã —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä:\n\n"
        "üñ• [Canvas](http://canvas.narxoz.kz/)\n"
        "üíº [Platonus](https://platonus.narxoz.kz/)"
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=main_menu)

# --- /schedule ---
week_days = ["–î“Ø–π—Å–µ–Ω–±—ñ", "–°–µ–π—Å–µ–Ω–±—ñ", "–°”ô—Ä—Å–µ–Ω–±—ñ", "–ë–µ–π—Å–µ–Ω–±—ñ", "–ñ“±–º–∞"]

@dp.message(F.text.in_({"/schedule", "üóìÔ∏è –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ"}))
async def schedule(message: types.Message, state: FSMContext):
    chat_id = str(message.chat.id)
    data = load_data()
    if chat_id not in data["schedule"] or not data["schedule"][chat_id]:
        await message.answer("üìÖ –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ —Ç–∞–±—ã–ª–º–∞–¥—ã. –ö–µ—Ç—Ç—ñ–∫, –æ—Ä–Ω–∞—Ç–∞–π—ã“õ!")
        await state.update_data(day_index=0)
        await message.answer(f"{week_days[0]} –∫“Ø–Ω—ñ–Ω—ñ“£ –ø”ô–Ω–¥–µ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑:")
        await state.set_state(Schedule.waiting_for_day)
    else:
        text = "üóìÔ∏è *–°–µ–Ω—ñ“£ —Å–∞–±–∞“õ –∫–µ—Å—Ç–µ“£:*\n\n"
        for day, subjects in data["schedule"][chat_id].items():
            text += f"üìò {day}: {subjects}\n"
        await message.answer(text, parse_mode="Markdown", reply_markup=main_menu)

@dp.message(Schedule.waiting_for_day)
async def save_schedule(message: types.Message, state: FSMContext):
    data_state = await state.get_data()
    day_index = data_state["day_index"]
    chat_id = str(message.chat.id)
    data = load_data()

    if "schedule" not in data:
        data["schedule"] = {}
    if chat_id not in data["schedule"]:
        data["schedule"][chat_id] = {}

    data["schedule"][chat_id][week_days[day_index]] = message.text
    save_data(data)

    if day_index + 1 < len(week_days):
        await state.update_data(day_index=day_index + 1)
        await message.answer(f"{week_days[day_index + 1]} –∫“Ø–Ω—ñ–Ω—ñ“£ –ø”ô–Ω–¥–µ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑:")
    else:
        await message.answer("‚úÖ –ö–µ—Å—Ç–µ —Å–∞“õ—Ç–∞–ª–¥—ã!", reply_markup=main_menu)
        await state.clear()

# --- /remind ---
@dp.message(F.text.in_({"/remind", "‚è∞ –ï—Å–∫–µ —Å–∞–ª“ì—ã—à"}))
async def remind(message: types.Message, state: FSMContext):
    await message.answer("‚è∞ –£–∞“õ—ã—Ç –ø–µ–Ω –º”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑ (–º—ã—Å–∞–ª—ã: 21:30 –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∂–∞—Å–∞—É)")
    await state.set_state(Reminder.waiting_for_text)

@dp.message(Reminder.waiting_for_text)
async def set_reminder(message: types.Message, state: FSMContext):
    try:
        time_str, text = message.text.split(" ", 1)
        hour, minute = map(int, time_str.split(":"))
        now = datetime.now()
        remind_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if remind_time < now:
            remind_time = remind_time.replace(day=now.day + 1)

        scheduler.add_job(send_reminder, "date", run_date=remind_time, args=[message.chat.id, text])
        await message.answer(f"‚úÖ –ï—Å–∫–µ —Å–∞–ª“ì—ã—à –æ—Ä–Ω–∞—Ç—ã–ª–¥—ã: {time_str} ‚Äî {text}", reply_markup=main_menu)
        await state.clear()
    except Exception:
        await message.answer("‚ö†Ô∏è “ö–∞—Ç–µ —Ñ–æ—Ä–º–∞—Ç! –ú—ã—Å–∞–ª—ã: 22:10 –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∂–∞—Å–∞—É", reply_markup=main_menu)

async def send_reminder(chat_id, text):
    await bot.send_message(chat_id, f"üîî –ï—Å–∫–µ —Å–∞–ª“ì—ã—à: {text}")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    scheduler.start()
    print("‚úÖ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
